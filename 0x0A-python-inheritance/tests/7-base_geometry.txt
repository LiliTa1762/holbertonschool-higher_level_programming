7. Integer validator
=======================
Function
========
class with a validator of errors

Operations
==========
Public instance method: def integer_validator(self, name, value): that validates
value

Import module:
    >>> BG = __import__("7-base_geometry").BaseGeometry

Checking for module docstring:
    >>> m = __import__("7-base_geometry").__doc__
    >>> len(m) > 1
    True

Checking for class docstring:
    >>> c = __import__("7-base_geometry").BaseGeometry.__doc__
    >>> len(c) > 1
    True

Checking for method docstring:
     >>> mod1 = __import__("7-base_geometry").BaseGeometry.area.__doc__
     >>> len(mod1) > 1
     True

    >>> mod2 = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
    >>> len(mod2) > 1
    True

Checking for area failure:
    >>> b = BG()
    >>> b.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

Checking too many arguments for area:
    >>> b.area(1)
    Traceback (most recent call last):
    ...
    TypeError: area() takes 1 positional argument but 2 were given

Checking integer validator for passing integer:
    >>> b.integer_validator("integer", 1)

Checking for integer == 0:
    >>> b.integer_validator("integer", 0)
    Traceback (most recent call last):
    ...
    ValueError: integer must be greater than 0

Checking for integer < 0;
    >>> b.integer_validator("integer", -5)
    Traceback (most recent call last):
    ...
    ValueError: integer must be greater than 0
